Compiling with own parser...
Dumping IR ...
module source.tinf:

define i32 @main() {
main:
  %i = alloca i32, align 4
  store i32 %139 ptr %i, align 4
  br label %for_cond
for_cond:
  %18 = load i32, ptr %i, align 4
  %15 = icmp ne i1 %18, %140
  br i1 %15, label %for_body, label %after_for
for_body:
  %40 = load i32, ptr %i, align 4
  %38 = add i32 %40, %141
  store i32 %38 ptr %i, align 4
  br label %for_increment
for_increment:
  %28 = load i32, ptr %i, align 4
  %26 = add i32 %28, %142
  store i32 %26 ptr %i, align 4
  br label %for_cond
after_for:
  %i = alloca i32, align 4
  store i32 %143 ptr %i, align 4
  br label %for_cond
for_cond:
  %58 = load i32, ptr %i, align 4
  %55 = icmp ne i1 %58, %144
  br i1 %55, label %for_body, label %after_for
for_body:
  br label %for_increment
for_increment:
  %68 = load i32, ptr %i, align 4
  %66 = add i32 %68, %145
  store i32 %66 ptr %i, align 4
  br label %for_cond
after_for:
  %i = alloca i32, align 4
  store i32 %146 ptr %i, align 4
  br label %for_cond
for_cond:
  %87 = load i32, ptr %i, align 4
  %84 = icmp ne i1 %87, %147
  br i1 %84, label %for_body, label %after_for
for_body:
  %j = alloca i32, align 4
  store i32 %148 ptr %j, align 4
  br label %for_cond
for_cond:
  %116 = load i32, ptr %j, align 4
  %113 = icmp ne i1 %116, %149
  br i1 %113, label %for_body, label %after_for
for_body:
  br label %for_increment
for_increment:
  %126 = load i32, ptr %j, align 4
  %124 = add i32 %126, %150
  store i32 %124 ptr %j, align 4
  br label %for_cond
after_for:
  br label %for_increment
for_increment:
  %97 = load i32, ptr %i, align 4
  %95 = add i32 %97, %151
  store i32 %95 ptr %i, align 4
  br label %for_cond
after_for:
  ret i32 %152
}

Compilation successful!